package com.lksfx.virusByte.effects;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.assets.AssetDescriptor;
import com.badlogic.gdx.assets.AssetLoaderParameters.LoadedCallback;
import com.badlogic.gdx.assets.AssetManager;
import com.badlogic.gdx.assets.loaders.TextureLoader;
import com.badlogic.gdx.assets.loaders.TextureLoader.TextureParameter;
import com.badlogic.gdx.files.FileHandle;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.Texture.TextureWrap;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.Animation.PlayMode;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.GdxRuntimeException;
import com.lksfx.virusByte.VirusByteGame;
import com.lksfx.virusByte.gameControl.Assets;
import com.lksfx.virusByte.gameControl.Debug;

/**
 * BackRender is a class used to draw everything in the background or foreground
 * @author LKSFX
 */
public class BackgroundRenderer implements Comparable<BackgroundRenderer> {
	private final boolean debug = true;
	public float x, y, scrollTimerV, scrollSpeedV, scrollTimerU, scrollSpeedU, timer, duration, lengthV = 1f, lengthU = 1f, alpha,
			spriteWidth, spriteHeight;
	
	public boolean isLoaded; //is true when all the frames of this background is loaded
	
	// ============= //
	// all the attributes that can be stored to set when the textures are loaded and animation is created
	// =========== //
	
	public boolean active, visible = true, fade;
	private boolean end;
	private float alphaMeta = .9f, alphaOperator;
	
	/** store temporary values for fields to set when the texture loads*/
	private float temp_width, temp_height;
	private boolean toResize;
	
	/**the layer that this background will be draw*/
	public int depth;
	
	private AssetManager manager;
	public RendererConfig config;
	
	/**animated sprite instance*/
	public AnimatedSprite sprite;
	
	/**array with descriptors to load the textures*/
	Array< AssetDescriptor<Texture> > descriptors;
	TextureRegion[] frames; 
 	
	public BackgroundRenderer(Sprite sprite, float scrollSpeed, float duration, int depth, boolean fade) {
		this.sprite = new AnimatedSprite( sprite );
		this.scrollSpeedV = scrollSpeed;
		this.duration = duration;
		this.depth = depth;
		this.fade = fade;
		isLoaded = true;
		active = true;
	}
	
	public BackgroundRenderer(String path, float scrollSpeed, float duration) {
		initialize(path, scrollSpeed, duration, 0, true, null);
	}
	
	public BackgroundRenderer(String path, float scrollSpeed, float duration, RendererConfig config) {
		this(path, scrollSpeed, duration, 0, true, config);
	}
	
	public BackgroundRenderer(String path, float scrollSpeed, float duration, int depth, boolean fade) {
		initialize(path, scrollSpeed, duration, depth, fade, null);
	}
	
	public BackgroundRenderer(String path, float scrollSpeed, float duration, int depth, boolean fade, RendererConfig config) {
		initialize(path, scrollSpeed, duration, depth, fade, config);
	}
	
	public void initialize(String path, float scrollSpeed, float duration,
			int depth, boolean fade, RendererConfig config) {
		this.scrollSpeedV = scrollSpeed;
		this.duration = duration;
		this.depth = depth;
		this.fade = fade;
		this.config = config;
		manager = Assets.manager;
		toLoad(path);
	}
	
	/**create descriptors and put them to load in assetManager*/
	private void toLoad(String path) {
		//check if directory exists
		FileHandle file = Gdx.files.internal(path);
		FileHandle[] textureFileList = null;
		if ( file.isDirectory() ) {
			try {
				Debug.log("the path file is a directory");
				textureFileList = file.list();
			} catch (GdxRuntimeException ex) {ex.printStackTrace();}
		} else {
			Debug.log("the path file is not a directory");
			if ( path == null ) return;
			textureFileList = new FileHandle[] {file};
		}
		if ( (textureFileList == null) || ( textureFileList.length == 0) ) return;
		active = true;
		
		descriptors = new Array< AssetDescriptor<Texture> >(textureFileList.length);
		frames = new TextureRegion[textureFileList.length];
		
		TextureParameter params = new TextureLoader.TextureParameter();
		params.magFilter = TextureFilter.Linear;
		params.minFilter = TextureFilter.Linear;
		params.wrapU = TextureWrap.Repeat;
		params.wrapV = TextureWrap.Repeat;
		
		params.loadedCallback = new LoadedCallback() {
			@Override
			public void finishedLoading(AssetManager assetManager, String fileName, @SuppressWarnings("rawtypes") Class type) {
				for ( AssetDescriptor<Texture> desc : descriptors ) {
					if ( fileName.equals( desc.fileName ) && type.equals( Texture.class ) ) {
						Debug.log("loaded: " + desc.fileName);
						int frameIndex = Integer.valueOf( fileName.replaceAll("[^0-9]", " ").trim() );
						Debug.log("frameIndex " + frameIndex);
						frames[frameIndex-1] = new TextureRegion( assetManager.get(fileName,  Texture.class));
						if ( !isLoaded ) {
							for ( int i = 0; i < frames.length; i++ ) {
								if (frames[i] == null) return;
							}
							isLoaded = true; //check if all the frames are loaded
						}
					}
					
					if ( isLoaded ) {
						sprite = new AnimatedSprite(new Animation( (config != null) ? config.animSpeed : 1/15f , frames), false, config);
						sprite.setAlpha(alpha);
						if ( toResize ) {
							Debug.log("texture loaded, and to Resize is true");
							sprite.setSize(temp_width, temp_height); // set the initial size when necessary
							toResize = false;
						}
						timer = 0; // set the time to zero to begin draw the texture
					}
				}
			}
		};
		
		//put frames to load
		for (int i = 0; i < textureFileList.length; i++) {
			//counting occurrence of character with loop
			
			descriptors.add( new AssetDescriptor<Texture>(textureFileList[i], Texture.class, params ) ); 
			
			if ( manager.isLoaded(descriptors.get(i).fileName, Texture.class) ) {
				//file already loaded
				frames[i] = new TextureRegion( manager.get(descriptors.get(i).fileName, Texture.class) );
				continue;
			}
			manager.load(descriptors.get(i));
			Debug.log("asset put to load " );
		}
		
	}
	
	public void draw(SpriteBatch batch, float deltaTime) {
		if ( isLoaded ) {
			// when the texture is already loaded
			// the texture is draw on screen
			if (end) {
				// when the background render time end, fade out alpha
				if (fade) { // fade out active
					alpha -= alphaOperator;
					sprite.setAlpha(alpha);
					if (alpha < 0) finalize();
				} else {
					visible = false;
					finalize();
				}
			} else {
				if (alpha < alphaMeta) {
					// slowly increase the alpha of this sprite 
					if (fade) {
						alpha += alphaOperator;
						sprite.setAlpha(alpha);
					} else {
						if (alphaMeta != 0) {
							alpha = alphaMeta;
							sprite.setAlpha(alpha);
						}
					}						
				}
				if (duration > 0) if (timer > duration) end = true;
			}
			//draw the sprite if the sprite is not null
			
			if (visible) sprite.draw(batch);
			//vertical texture scroll
			if (scrollSpeedV != 0) {
//				if ( descriptors != null ) Debug.log("scroll V speed " + scrollSpeedV);
				scrollTimerV += scrollSpeedV*deltaTime;
				sprite.setV(scrollTimerV);
				sprite.setV2(scrollTimerV/*+scrollVCompensation*/+lengthV);
			}
			// horizontal texture scroll
			if (scrollSpeedU != 0) {
//				if ( descriptors != null ) Debug.log("scroll U speed " + scrollSpeedU);
				scrollTimerU += scrollSpeedU*deltaTime;
				sprite.setU(scrollTimerU);
				sprite.setU2(scrollTimerU/*+scrollVCompensation*/+lengthU);
			}
			
			timer += deltaTime;
			
		}
	}
	
	/** set the alpha value for increment and decrement, fade in/out
	 * @param alphaMeta is the max total amount of alpha to fill in the fade in
	 * @param alphaOperator is the amount to increase and decrease in the fade in/out each step*/
	public void setAlphaAttribute(float alphaMeta, float alphaOperator) {
		this.alphaMeta = alphaMeta;
		this.alphaOperator = alphaOperator;
	}
	
	public void setTextureBrowser(float horizontalSpeed, float verticalSpeed) {
		scrollSpeedV = verticalSpeed;
		scrollSpeedU = horizontalSpeed;
	}
	
	public void setSize(float width, float height) {
		if (sprite == null) {
			toResize = true;
			temp_width = width;
			temp_height = height;
			return;
		}
		Debug.log("called setSize and executed");
		if ( descriptors != null && descriptors.get(0).fileName.equals( Assets.Textures.binaryTex.path ) ) Debug.log("called setResize and executed");
		if ( width > sprite.getWidth() ) spriteWidth = width;
		if ( width > sprite.getHeight() ) spriteHeight = height;
		if ( ( spriteWidth == width || spriteHeight == height ) ) sprite.setSize(width, height);
		toResize = false;
	}
	
	public void setPosition(float xx, float yy) {
		x = (xx != x) ? xx : x;
		y = (yy != y) ? yy : y;
		if (sprite != null) sprite.setPosition(x, y);
	}
	
	public void setRegion(float u, float v, float u2, float v2) {
		if (sprite == null) return;
		sprite.setRegion(u, v, u2, v2);
	}
	
	@Override
	public int compareTo(BackgroundRenderer other) {
		return this.depth - other.depth;
	}
	
	/** ends the use of this background */
	public void finalize() {
		if (fade) {
			if (alpha > 0) {
				end = true;
				return;
			}
		}
		dispose();
		active = false;
	}
	
	public void dispose() {
		if ( descriptors == null || descriptors.size == 0 ) return;
			
		for ( AssetDescriptor<Texture> desc : descriptors ) {
			
			// only if the asset patch are been used
			String assetPatch = desc.fileName;
			if ( manager.isLoaded(assetPatch) ) {
				int currentTextureReferences = manager.getReferenceCount(assetPatch);
				manager.setReferenceCount(assetPatch, currentTextureReferences-1);
				if (currentTextureReferences-1 <= 0) {
					if (VirusByteGame.BACK.unloadBackgroundTextureAssets(assetPatch)) {
						if ( debug ) Debug.log("background asset not used unloaded!");
						if ( debug ) Debug.log("the " + assetPatch +" background texture has unloaded.");
					}
				}
			}
			
		} 
		
		visible = false;
	}
	
	
	/**
	 *  This class pass all the necessary configuration information for the AnimatedSpriteBackground
	 * @author LKSFX
	 */
	public static class RendererConfig {
		public float width, height, originX, originY, animSpeed;
		public boolean animated;
		public Animation.PlayMode playmode;
		public Texture.TextureWrap wrapmode;
		
		public RendererConfig(boolean animated, float animSpeed) {
			this(0, 0, 0, 0, animSpeed, animated, Animation.PlayMode.LOOP, TextureWrap.Repeat);
		}
		
		public RendererConfig(boolean animated, float animSpeed, float width, float height) {
			this(width, height, 0, 0, animSpeed, animated, Animation.PlayMode.LOOP, TextureWrap.Repeat);
		}
		
		/**
		 * 
		 * @param regionWith the width of each square if tiled
		 * @param regionHeight the height of each square if tiled
		 * @param regionOriginX the x origin inside the texture
		 * @param regionOriginY the y origin inside the texture
		 * @param spacingU the horizontal space between tiles
		 * @param spacingV the vertical space between tiles
		 * @param animSpeed speed of the animation
		 * @param animated if this background is animated
		 * @param playmode the animation play mode 
		 * @param wrapmode the wrap type in the texture
		 */
		public RendererConfig(float width, float height,
				float originX, float originY, float animSpeed, boolean animated,
				PlayMode playmode, TextureWrap wrapmode) {
			
			this.width = width;
			this.height = height;
			this.originX = originX;
			this.originY = originY;
			this.animSpeed = animSpeed;
			this.animated = animated;
			this.playmode = playmode;
			this.wrapmode = wrapmode;
		}
	}
}