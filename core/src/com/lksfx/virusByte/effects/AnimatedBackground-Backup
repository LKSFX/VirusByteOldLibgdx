/** Copyright 2013 Robin Stumm (serverkorken@googlemail.com, http://dermetfan.net/)
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License. */

package com.lksfx.virusByte.effects;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Graphics;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureWrap;
import com.badlogic.gdx.graphics.g2d.Animation;
import com.badlogic.gdx.graphics.g2d.Animation.PlayMode;
import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.graphics.glutils.FrameBuffer;
import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.utils.Array;
import com.lksfx.virusByte.VirusByteGame;
import com.lksfx.virusByte.gameControl.Debug;

/** An {@link AnimatedSpriteBackground} holds an {@link Animation} and sets the {@link Texture} of its super type {@link Sprite} to the correct one according to the information in the {@link Animation}.<br>
 *  Usage:
 *  <p><code>Animation animation = new Animation(1 / 3f, frame1, frame2, frame3);<br>
 * 	animation.setPlayMode(Animation.LOOP);<br>
 * 	animatedSprite = new AnimatedSprite(animation);</code></p>
 *  You can draw using any of the {@link Sprite Sprite's} draw methods:<br>
 *  <code>animatedSprite.draw(batch);</code> 
 *  @author dermetfan */
public class AnimatedSpriteBackground extends Sprite {
	
	public static boolean DEBUG = true;
	
	/** the {@link Animation} to display */
	private Animation animation;

	/** the current time of the {@link Animation} */
	private float time;

	/** if the animation is playing */
	private boolean playing = true;

	/** if the animation should be updated every time it's drawn */
	private boolean autoUpdate = true;

	/** if the size of the previous frame should be kept by the following frames */
	private boolean keepSize;

	/** if a frame should be centered in the previous one */
	private boolean centerFrames;
	
	private boolean isAnimated;
	
	/** creates a new {@link AnimatedSpriteBackground} with the given {@link Animation}
	 *  @param animation the {@link #animation} to use */
	public AnimatedSpriteBackground(Animation animation) {
		this(animation, new AnimatedSpriteBackConfig(false, 0));
	}
	
	public AnimatedSpriteBackground(Sprite sprite) {
		super(sprite);
	}
	
	/** creates a new {@link AnimatedSpriteBackground} with the given {@link Animation}
	 *  @param animation the {@link #animation} to use
	 *  @param keepSize the {@link #keepSize} to use */
	public AnimatedSpriteBackground(Animation animation, AnimatedSpriteBackConfig config) {
		super( animation.getKeyFrame(0) );
		this.animation = animation;
		//this.keepSize = keepSize;
		if (config.animated && animation.getKeyFrames().length > 1) makeFBOtextures(config);
	}
	
	private Array<FrameBuffer> bufferedTextures;
	
	private void makeFBOtextures(AnimatedSpriteBackConfig config) {
		TextureRegion[] frames = animation.getKeyFrames();
		float worldWidth = VirusByteGame.VIEWPORT.getWorldWidth(), worldHeight = VirusByteGame.VIEWPORT.getWorldHeight(), bufferWidth = 0, bufferHeight = 0,
				regionWidth = config.regionWidth != 0 ? config.regionWidth : frames[0].getRegionWidth(),
				regionHeight = config.regionHeight != 0 ? config.regionHeight : frames[0].getRegionHeight();
		while (bufferWidth < worldWidth) bufferWidth += regionWidth;
		while (bufferHeight < worldHeight) bufferHeight += regionHeight;
		bufferWidth = 640f;
		
		if (frames.length > 0) {
			bufferedTextures = new Array<FrameBuffer>();
			SpriteBatch batch = VirusByteGame.GAME.batch;
			Matrix4 matrix = new Matrix4();
			matrix.setToOrtho2D(0, 0, bufferWidth, bufferHeight);
			
			boolean drawing = batch.isDrawing();// check if batch is in use
			Array<TextureRegion> regionBuffered = new Array<TextureRegion>();
			FrameBuffer buffer;
			if (drawing) batch.end();
			batch.setProjectionMatrix(matrix);
			for (int i = 0; i < frames.length; i++) {
				buffer = new FrameBuffer(Pixmap.Format.RGBA8888, (int)bufferWidth, (int)bufferHeight, false);
				buffer.begin();
				batch.begin();
				float widthFill = 0f, heightFill = 0f;
				/*regionWidth = config.regionWidth != 0 ? config.regionWidth : frames[i].getRegionWidth();
				regionHeight = config.regionHeight != 0 ? config.regionHeight : frames[i].getRegionHeight();*/
				do {
					widthFill = 0f;
					do {
						setPosition(widthFill, heightFill);
						batch.draw(frames[i], widthFill, heightFill, regionWidth, regionHeight);
						widthFill += regionWidth + config.spacingU;
					} while (! (widthFill >= bufferWidth) );
					heightFill += regionHeight + config.spacingV;
				} while (! (heightFill >= bufferHeight) );
				Debug.log("bufferSize is " + bufferWidth + " | fillSize is " + widthFill );
				batch.end();
				buffer.end();
				bufferedTextures.add(buffer); // store buffer
				buffer.getColorBufferTexture().setWrap(config.wrapmode, config.wrapmode); //set buffer texture wrap repeat
				regionBuffered.add(new TextureRegion(buffer.getColorBufferTexture()) ); //make the array with textureRegions to make the new animation
			}
			batch.setProjectionMatrix(VirusByteGame.VIEWPORT.getCamera().combined);
			if (drawing) batch.begin();
			Debug.log("new animation is " + frames.length + " of size");
			animation = new Animation(config.animSpeed, regionBuffered, config.playmode); // set this animation has the main animation
			if (!config.animated) stop();
			setRegion(animation.getKeyFrame(0)); // set the regions with the size of the first region
			//setColor(1, 1, 1, 1);
			flip(false, true);
//			setSize(bufferWidth, bufferHeight);
			setOrigin(config.regionOriginX != 0 ? config.regionOriginX : (worldWidth / 2), config.regionOriginY != 0 ? config.regionOriginY :  (worldHeight / 2) ); //set origin
			setPosition(0, 0);
			isAnimated = true;
		}
		
	}
	
	/**
	 *  This class pass all the necessary configuration information for the AnimatedSpriteBackground
	 * @author LKSFX
	 */
	public static class AnimatedSpriteBackConfig {
		public float regionWidth, regionHeight, regionOriginX, regionOriginY, spacingU, spacingV,
		animSpeed;
		public boolean animated;
		public Animation.PlayMode playmode;
		public Texture.TextureWrap wrapmode;
		
		public AnimatedSpriteBackConfig(boolean animated, float animSpeed) {
			this(0, 0, 0, 0, 0, 0, animSpeed, animated, Animation.PlayMode.LOOP, TextureWrap.Repeat);
		}
		
		public AnimatedSpriteBackConfig(boolean animated, float animSpeed, float regionWidth, float regionHeight, 
				float spacingU, float spacingV) {
			this(regionWidth, regionHeight, 0, 0, spacingU, spacingV, animSpeed, animated, Animation.PlayMode.LOOP, TextureWrap.Repeat);
		}
		
		/**
		 * 
		 * @param regionWith the width of each square if tiled
		 * @param regionHeight the height of each square if tiled
		 * @param regionOriginX the x origin inside the texture
		 * @param regionOriginY the y origin inside the texture
		 * @param spacingU the horizontal space between tiles
		 * @param spacingV the vertical space between tiles
		 * @param animSpeed speed of the animation
		 * @param animated if this background is animated
		 * @param playmode the animation play mode 
		 * @param wrapmode the wrap type in the texture
		 */
		public AnimatedSpriteBackConfig(float regionWith, float regionHeight,
				float regionOriginX, float regionOriginY, float spacingU,
				float spacingV, float animSpeed, boolean animated,
				PlayMode playmode, TextureWrap wrapmode) {
			
			this.regionWidth = regionWith;
			this.regionHeight = regionHeight;
			this.regionOriginX = regionOriginX;
			this.regionOriginY = regionOriginY;
			this.spacingU = spacingU;
			this.spacingV = spacingV;
			this.animSpeed = animSpeed;
			this.animated = animated;
			this.playmode = playmode;
			this.wrapmode = wrapmode;
		}
	}
	
	/** updates the {@link AnimatedSpriteBackground} with the delta time fetched from {@link Graphics#getDeltaTime()  Gdx.graphics.getDeltaTime()} */
	public void update() {
		update(Gdx.graphics.getDeltaTime());
	}

	/** updates the {@link AnimatedSpriteBackground} with the given delta time */
	public void update(float delta) {
		oldX = getX();
		oldY = getY();
		oldWidth = getWidth();
		oldHeight = getHeight();
		oldOriginX = getOriginX();
		oldOriginY = getOriginY();
		
		if (DEBUG) {
			/*if (Gdx.input.isKeyJustPressed(Keys.P)) {
				int counter = 0;
				try{
					TextureData data = bufferedTextures.get(0).getColorBufferTexture().getTextureData();
					if (!data.isPrepared()) data.prepare();
					Pixmap pixmap = data.consumePixmap(), toSave;
					FileHandle fh = new FileHandle("animatedTexture" + counter++ + ".png");
					toSave = new Pixmap(getRegionWidth(), getRegionHeight(), Pixmap.Format.RGBA8888);
					//toSave.drawPixmap(pixmap, 0, 0);
					PixmapIO.writePNG(fh, toSave);
				} catch (Exception ex) {ex.printStackTrace();}
			}*/
		}
		
		if(playing) {
			setRegion(animation.getKeyFrame(time += delta));
			if(!keepSize)
				setSize(getRegionWidth(), getRegionHeight());
		}
	}

	/** needed for {@link #centerFrames} */
	private float oldX, oldY, oldWidth, oldHeight, oldOriginX, oldOriginY;

	/** {@link Sprite#draw(Batch) Draws} this {@code AnimatedSprite}. If {@link #autoUpdate} is true, {@link #update()} will be called before drawing. */
	@Override
	public void draw(Batch batch) {
		if (!isAnimated) {
			super.draw(batch);
			return;
		} 
		
		if(autoUpdate)
			update();

		boolean centerFramesEnabled = centerFrames && !keepSize; // if keepSize is true centerFrames has no effect 

		if(centerFramesEnabled) {
			float differenceX = oldWidth - getRegionWidth(), differenceY = oldHeight - getRegionHeight();
			setOrigin(oldOriginX - differenceX / 2, oldOriginY - differenceY / 2);
			setBounds(oldX + differenceX / 2, oldY + differenceY / 2, oldWidth - differenceX, oldHeight - differenceY);
		}
		
		float widthScreen = 0f, heightScreen = 0f;
		do {
			widthScreen = 0;
			do {
				setPosition(widthScreen, heightScreen);
				super.draw(batch);
				widthScreen += getRegionWidth();
			} while (widthScreen < VirusByteGame.VIEWPORT.getWorldWidth());
			heightScreen += getRegionHeight();
		} while (heightScreen < VirusByteGame.VIEWPORT.getWorldHeight());

		if(centerFramesEnabled) {
			setOrigin(oldOriginX, oldOriginY);
			setBounds(oldX, oldY, oldWidth, oldHeight);
		}
	}
	
	/** flips all frames
	 *  @see #flipFrames(boolean, boolean, boolean) */
	public void flipFrames(boolean flipX, boolean flipY) {
		flipFrames(flipX, flipY, false);
	}

	/** flips all frames
	 *  @see #flipFrames(float, float, boolean, boolean, boolean) */
	public void flipFrames(boolean flipX, boolean flipY, boolean set) {
		flipFrames(0, animation.getAnimationDuration(), flipX, flipY, set);
	}

	/** flips all frames
	 *  @see #flipFrames(float, float, boolean, boolean, boolean) */
	public void flipFrames(float startTime, float endTime, boolean flipX, boolean flipY) {
		flipFrames(startTime, endTime, flipX, flipY, false);
	}

	/** flips all frames from {@code startTime} to {@code endTime}
	 *  @param startTime the animation state time of the first frame to flip
	 *  @param endTime the animation state time of the last frame to flip
	 *  @param set if the frames should be set to {@code flipX} and {@code flipY} instead of actually flipping them */
	public void flipFrames(float startTime, float endTime, boolean flipX, boolean flipY, boolean set) {
		for(float t = startTime; t < endTime; t += animation.getFrameDuration()) {
			TextureRegion frame = animation.getKeyFrame(t);
			frame.flip(flipX && (set ? !frame.isFlipX() : true), flipY && (set ? !frame.isFlipY() : true));
		}
	}

	/** sets {@link #playing} to true */
	public void play() {
		playing = true;
	}

	/** sets {@link #playing} to false */
	public void pause() {
		playing = false;
	}

	/** pauses and sets the {@link #time} to 0 */
	public void stop() {
		playing = false;
		time = 0;
	}

	/** @param time the {@link #time} to go to */
	public void setTime(float time) {
		this.time = time;
	}

	/** @return the current {@link #time} */
	public float getTime() {
		return time;
	}

	/** @return the {@link #animation} */
	public Animation getAnimation() {
		return animation;
	}

	/** @param animation the {@link #animation} to set */
	public void setAnimation(Animation animation) {
		this.animation = animation;
	}

	/** @return if this {@link AnimatedSpriteBackground} is playing */
	public boolean isPlaying() {
		return playing;
	}

	/** @param playing if the {@link AnimatedSpriteBackground} should be playing */
	public void setPlaying(boolean playing) {
		this.playing = playing;
	}

	/** @return if the {@link #animation} has finished playing */
	public boolean isAnimationFinished() {
		return animation.isAnimationFinished(time);
	}

	/** @return the {@link #autoUpdate} */
	public boolean isAutoUpdate() {
		return autoUpdate;
	}

	/** @param autoUpdate the {@link #autoUpdate} to set */
	public void setAutoUpdate(boolean autoUpdate) {
		this.autoUpdate = autoUpdate;
	}

	/** @return the {{@link #keepSize} */
	public boolean isKeepSize() {
		return keepSize;
	}

	/** @param keepSize the {@link #keepSize} to set */
	public void setKeepSize(boolean keepSize) {
		this.keepSize = keepSize;
	}

	/** @return the {@link #centerFrames} */
	public boolean isCenterFrames() {
		return centerFrames;
	}

	/** @param centerFrames the {@link #centerFrames} to set */
	public void setCenterFrames(boolean centerFrames) {
		this.centerFrames = centerFrames;
	}
	
	@Override
	public void scroll(float U, float V) {
		if (!isAnimated) {
			super.scroll(U, V);
			return;
		}
		for (TextureRegion region : animation.getKeyFrames()) {
			region.scroll(U, V);
		}
	}
	
	@Override
	public void setU(float U) {
		if (!isAnimated) {
			super.setU(U);
			return;
		}
		for (TextureRegion region : animation.getKeyFrames()) {
			region.setU(U);
		}
	}
	
	@Override
	public void setU2(float U2) {
		if (!isAnimated) {
			super.setU2(U2);
			return;
		}
		for (TextureRegion region : animation.getKeyFrames()) {
			region.setU2(U2);
		}
	}
	
	@Override
	public void setV(float V) {
		if (!isAnimated) {
			super.setV(V);
			return;
		}
		for (TextureRegion region : animation.getKeyFrames()) {
			region.setV(V);
		}
	}
	
	@Override
	public void setV2(float V2) {
		if (!isAnimated) {
			super.setV2(V2);
			return;
		}
		for (TextureRegion region : animation.getKeyFrames()) {
			region.setV2(V2);
		}
	}
	
	public void dispose() {
		if (bufferedTextures != null) for (FrameBuffer buffer : bufferedTextures) buffer.dispose();
	}
}